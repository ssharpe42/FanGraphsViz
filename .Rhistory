c(str_split('sdfsffs',',')[[1]],'s')
shiny::runApp()
test2
head(test2)
shiny::runApp()
func = function(){ geom_point()}
p <- ggplot(mtcars, aes(wt, mpg))
p + geom_point()
p <- ggplot(mtcars, aes(wt, mpg))
p + func()
p <- ggplot(mtcars)
p + func(aes(wt, mpg))
func = function(...){ geom_point(...)}
p <- ggplot(mtcars)
p + func(aes(wt, mpg))
?geom_label()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars)))
ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars)))+geom_text()
ggplot(mtcars)+geom_text(aes(wt, mpg, label = rownames(mtcars)))
ggplot(mtcars)+geom_text(aes(wt, mpg, label = rownames(mtcars), colour=NULL))
ggplot(mtcars)+geom_text(aes(wt, mpg, label =cyl, colour=NULL))
shiny::runApp()
head(test2)
geom =  function(...){ geom_point(...)}
shiny::runApp()
?geom_line
test2
shiny::runApp()
ggplot(test2)+geom_line(aes(x=Season, y=HR, group=Team))
ggplot(test2)+geom_line(aes(x=Season, y=HR, group=Team, colour=Team))
shiny::runApp()
ggplot(test2)+geom_point(aes_string(x = HR, y = BBperc)
)
ggplot(test2)+geom_point(aes(x = HR, y = BBperc) )
ggplot(test2)+geom_point(aes(x = HR, y = BBperc) ) +stat_smooth(method="lm", formula = y ~ poly(x, 2), se=T)
ggplot(test2)+geom_point(aes(x = HR, y = BBperc) ) +stat_smooth(method="lm", formula = y ~ poly(x, 2), se=TRUE)
ggplot(test2)+geom_point(aes(x = HR, y = BBperc) ) +stat_smooth(size=2,method="lm", formula = y ~ poly(x, 2), se=TRUE)
?stat_smooth
test2
test2%>%head()
ggplot(test2)+geom_point(aes(x = HR, y = BBperc)) +stat_smooth(size=2,method="lm", formula = y ~x, se=TRUE)
ggplot(test2)+geom_point(aes(x = HR, y = BBperc)) +stat_smooth(size=2,method="lm", formula = y ~x)
ggplot(test2)+geom_point(aes(x = G, y = )) +stat_smooth(size=2,method="lm", formula = y ~x)
ggplot(test2)+geom_point(aes(x = G, y = PA)) +stat_smooth(size=2,method="lm", formula = y ~x)
filter(test2, G>0 PA>0)
ggplot(filter(test2, G>0, PA>0))+geom_point(aes(x = G, y = PA)) +stat_smooth(size=2,method="lm", formula = y ~x)
ggplot(test2)+geom_point(aes(x = G, y = PA)) +geom_smooth(size=2,method="lm", formula = y ~x)
ggplot(test2)+geom_point(aes(x = G, y = PA)) +geom_smooth()
ggplot(test2)+geom_point(aes(x = G, y = PA)) +stat_smooth()
ggplot(test2)+geom_point(aes(x = G, y = PA)) +stat_smooth(aes(x = G, y = PA))
shiny::runApp()
ggplot(test2)+geom_point(aes(x = G, y = PA)) +stat_smooth(aes(x = G, y = PA),,method="lm", formula = y ~ poly(x, 2), se=T)
ggplot(test2)+geom_point(aes(x = G, y = PA)) +stat_smooth(aes(x = G, y = PA),method="lm", formula = y ~ poly(x, 2), se=T)
ggplot(test2)+geom_point(aes_string(x = 'G', y = 'PA')) +stat_smooth(aes(x = G, y = PA),method="lm", formula = y ~ poly(x, 2), se=T)
shiny::runApp()
ggplot(test2)+geom_point(aes_string(x = 'G', y = 'PA')) +stat_smooth(aes(x = G, y = PA),method="lm", formula = y ~ poly(x, 2), se=T)
shiny::runApp()
ggplot(test2)+geom_point(aes_string(x = 'G', y = 'PA')) +stat_smooth(aes(x = G, y = PA),method="lm", formula = y ~ poly(x, 2), se=T)
ggplot(test2)+geom_point(aes_string(x = 'G', y = 'PA')) +stat_smooth(aes(x = G, y = PA),method="lm", formula = y ~ poly(x, 3), se=T)
ggplot(test2)+geom_point(aes_string(x = 'G', y = 'PA')) +stat_smooth(aes(x = G, y = PA),method="lm", formula = y ~ poly(x, 10), se=T)
ggplot(test2)+geom_point(aes_string(x = 'G', y = 'PA')) +stat_smooth(aes(x = G, y = PA),method="lm", formula = y ~ poly(x, 100), se=T)
ggplot(test2)+geom_point(aes_string(x = 'G', y = 'PA')) +stat_smooth(aes(x = G, y = PA),method="lm", formula = y ~ poly(x, 20), se=T)
ggplot(test2)+geom_point(aes_string(x = 'G', y = 'PA')) +stat_smooth(aes(x = G, y = PA),method="lm", formula = y ~ poly(x, 15), se=T)
shiny::runApp()
?poly
shiny::runApp()
shiny::runApp()
shiny::runApp()
test2
p<-ggplot(test2)
p <- p + geom_point(aes(x = HR, y =AVG))
p
p+ stat_smooth(aes(x = HR, y =AVG),method="lm", formula = y ~ poly(x, graph_var$smooth_val), se=T)
p+ stat_smooth(aes(x = HR, y =AVG),method="lm", formula = y ~ poly(x,3), se=T)
p+ stat_smooth(aes(x = HR, y =AVG, colour = NULL),method="lm", formula = y ~ poly(x,3), se=T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?geom_histogram
shiny::runApp()
shiny::runApp()
head(test2)
df = test2
as.factor(df[,grepl('Season',names(df))])
df[,grepl('Season',names(df))] = as.factor(df[,grepl('Season',names(df))])
df$Season=NULL
df[,grepl('Season',names(df))] = as.factor(df[,grepl('Season',names(df))])
f[,grepl('Season',names(df))]
#setwd("~/GitHub/FanGraphsViz")
library(dplyr)
library(rvest)
library(stringr)
library(lubridate)
library(DT)
library(shiny)
library(ggthemes)
library(scales)
library(ggplot2)
library(shinythemes)
library(shinydashboard)
library(shinyjs)
library(plotly)
library(ggrepel)
options(stringsAsFactors = F)
bat_stats = read.csv('data/bat_stats.csv') %>% arrange(ID)
bat_stats_sm = read.csv('data/bat_stats_small.csv')%>% arrange(ID)
pit_stats = read.csv('data/pit_stats.csv')%>% arrange(ID)
pit_stats_sm = read.csv('data/pit_stats_small.csv')%>% arrange(ID)
fld_stats = read.csv('data/fld_stats.csv') %>% arrange(ID)
bat_splits = read.csv('data/bat_splits.csv')%>% arrange(ID)
pit_splits = read.csv('data/pit_splits.csv') %>% arrange(ID)
fld_splits = data.frame(Split = 'Full Season',ID=0)
teams = read.csv('data/teams.csv')%>% arrange(Team)
qualified_list =c('Qualified',0, 10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,
180,190,200,210,220,230,240,250,300,350,400,450,500,550,600,650,700,750,
800,850,900,950,1000,1500,2000,2500,3000,3500,4000,4500,5000,5500,6000,6500,
7000,7500,8000,8500,9000,9500,10000)
splits_for_small_stats = c('vs L', 'vs R', 'Home', 'Away', 'Grounders', 'Flies', 'Liners', 'Bunts', 'Pull', 'Center', 'Opposite', 'Low Leverage',
'Medium Leverage', 'High Leverage', 'Bases Empty', 'Men on Base', 'Men in Scoring', 'C', '1B', '2B', 'SS', '3B', 'RF',
'CF', 'LF', 'OF', 'DH', 'P', 'PH', 'PR', 'Batting 1st', 'Batting 2nd', 'Batting 3rd', 'Batting 4th', 'Batting 5th',
'Batting 6th', 'Batting 7th', 'Batting 8th', 'Batting 9th', 'vs L as L', 'vs R as L', 'vs L as R', 'vs R as R')
position_bat= c('All','P','C','1B','2B','SS','3B','RF','CF','LF','OF','NP')
position_pit= c('All'='all','Starters'='sta','Relievers'='rel')
position_fld = c('All','P','C','1B','2B','SS','3B','RF','CF','LF','OF')
ages = 14:58
seasons = 1871:year(today())
stat_lvl = c('Player Stats','Team Stats','League Stats')
stat_type = c('Batting','Pitching','Fielding')
leagues = c('All Leagues','AL','NL')
####### SCRAPE FUNCTIONS  ##########
pos = 'all'
stat = 'bat'
lg = 'all'
qual = 'y'
split = 'Full Season'
fields = c('AB','H')
season = 2016
season1 = 2016
splt_season = F
rookies = F
team = 'All Teams'
team_stats = F
split_team = T
lg_stats = F
active = F
age = c(21,58)
split_df = bat_splits
get_url = function(pos, stat, lg, qual, fields, season1, split,
season2, splt_season, rookies, team, split_team,
lg_stats, team_stats, active, age, stat_df, split_df, team_df){
#print(pos);print(stat);print(lg);print(qual);print(fields)
if(stat!='Pitching'){
pos = tolower(pos)
stat = ifelse(stat=='Batting','bat','fld')
}
else{
stat = switch(pos, 'All'='all','Starters'='sta','Relievers'='rel')
pos = 'all'
}
lg = ifelse(lg=='All Leagues','all', tolower(lg))
team = filter(team_df, Team==team)$ID[1]
fields = paste(filter(stat_df, Stat %in% fields)$ID, collapse=',')
active = ifelse(active,1,0)
split = filter(split_df, Split ==split)$ID
if(lg_stats)
split_teams_lg = ',ss'
else if(team_stats)
split_teams_lg = ',ts'
else if(split_team)
split_teams_lg = ',to'
else
split_teams_lg = ''
if(splt_season & rookies)
split_season_rookie=3
else if(rookies)
split_season_rookie=2
else if(splt_season)
split_season_rookie=1
else
split_season_rookie=0
if(qual=='Qualified') qual = 'y'
if(all(age == c(14, 58)))
age = 0
else
age = paste(age, collapse=',')
url = paste0("http://www.fangraphs.com/leaders.aspx?pos=", pos,
"&stats=",stat,
"&lg=",lg,
"&qual=", qual,
"&type=c,", fields,
"&season=",season2,
"&month=",split,
"&season1=", season1,
"&ind=", split_season_rookie,
"&team=", team, split_teams_lg,
"&rost=", active,
"&age=",age,
"&filter=&players=0&page=1_10000")
return(url)
}
scrape_data = function(url){
#scrape table
df = read_html(url) %>%
html_node('.rgMasterTable') %>%
html_table()
#column names
cols = as.character(df[2,-1])
#get rid of non used rows
df = df[-1:-3,-1]
#name columns
names(df) = cols
row.names(df)=1:nrow(df)
#percent columns
perc_cols = which(grepl('%',cols))
#make percent into decimal
df[, perc_cols] = lapply(df[,perc_cols], function(x) as.numeric(gsub(' %','',x))/100)
#numeric columns as numeric
df[, grepl('[[:digit:]]',df[1,])] = lapply(df[,grepl('[[:digit:]]',df[1,])], as.numeric)
#take out punct from names
names(df) = gsub('\\%','perc',names(df))
names(df) = gsub('\\+','plus',names(df))
names(df) = gsub('\\-','minus',names(df))
#Set seasons as factor
if(grepl('Season',names(df))) df$Season = as.factor(df$Season)
return(df)
}
shiny::runApp()
library(lubridate)
shiny::runApp()
shiny::runApp()
head(test2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?menuItem
shiny::runApp()
shiny::runApp()
shiny::runApp()
li
li()
?l
?h4
shiny::runApp()
shiny::runApp()
shiny::runApp()
test
cols
which(unlist(lapply(test, function(x) class(x)=='numeric')))
which(unlist(lapply(test, function(x) class(x)=='numeric')))->num
autoplot(prcomp(test[,num]))
library(ggfortify)
shiny::runApp()
?renderMenu
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
test
head(test)
prcomp(test[,-1:-2])
prcomp(test[,-1:-2])$Rotation
prcomp(test[,-1:-2])$rotation
prcomp(test[,-1:-2])$rotation%>% data.frame
prcomp(test[,-1:-2])$rotation%>% data.frame %>% gather
prcomp(test[,-1:-2])$rotation%>% data.frame %>% gather()
prcomp(test[,-1:-2])$rotation%>% data.frame %>% gather(Loading)
prcomp(test[,-1:-2])$rotation%>% data.frame ->df
d df$Variable = row.names(df)
df$Variable = row.names(df)
gather(df, Component)
library(dplyr)
gather(df, Component)
library(tidyr)
gather(df, Component)
gather(df, Component, Value)
gather(df, Component, Value,-Variable)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
mutate(df, Variable = row.names(df))%>%
gather(Component, Value,-Variable) %>%
mutate(PCnum = as.numeric(gsub('[[:alpha:]]','',Component))) %>%
arrange(PCnum)
shiny::runApp()
shiny::runApp()
gather(df, Component, Value,-Variable)
pdarkcols <- brewer.pal(8, "Dark
)
darkcols <- brewer.pal(8, "Dark2"
darkcols <- brewer.pal(8, "Dark2")
library(RColorBrewer)
shiny::runApp()
shiny::runApp()
df
df = mutate(df, Variable = row.names(df))%>%
gather(Component, Value,-Variable) %>%
mutate(PCnum = as.numeric(gsub('[[:alpha:]]','',Component))) %>%
arrange(PCnum)
df
ggplot(df,aes(x = PCnum, y = Variable)) +
geom_tile(aes(fill=Value))+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')
ggplot(df,aes(x = PCnum, y = Variable)) +
geom_tile(aes(fill=Value))+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_brewer(palette = "RdYlBu")
?scale_fill_brewer
ggplot(df,aes(x = PCnum, y = Variable)) +
geom_tile(aes(fill=Value))+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_colour_brewer(palette = "RdYlBu")
ggplot(df,aes(x = PCnum, y = Variable)) +
geom_tile(aes(fill=Value))+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_brewer(palette = "RdYlBu", type='div')
df
ggplot(df,aes(x = PCnum, y = Variable)) +
geom_tile(aes(fill=Value))+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_manual(palette = "RdYlBu")
ggplot(df,aes(x = PCnum, y = Variable)) +
geom_tile(aes(fill=Value))+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_manual()
ggplotly(p)
ggplot(df,aes(x = PCnum, y = Variable)) +
geom_tile(aes(fill=Value))+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_manual()
ggplot(df,aes(x = PCnum, y = Variable)) +
geom_tile(aes(fill=Value))+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_colour_manual('s')
ggplot(df,aes(x = PCnum, y = Variable)) +
geom_tile(aes(fill=Value))+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_manual('s')
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+scale_fill_manual('s')
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+scale_fill_economist()
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+scale_fill_continuous()
display.brewer.pal(11,'RdYlBu')
ggplot(df,aes(x = PCnum, y = Variable)) +
geom_tile(aes(fill=Value))+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_continuous(low = #0C0C9E, mid = 'white', high = 'red)
)
ggplot(df,aes(x = PCnum, y = Variable)) +
geom_tile(aes(fill=Value))+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_continuous(low = '#0C0C9E', mid = 'white', high = 'red)
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_continuous(low = '#0C0C9E', mid = 'white', high = 'red')
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_continuous(low = 'blue', mid = 'white', high = 'red')
?scale_fill_continuous
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_gradient(low = 'blue', mid = 'white', high = 'red')
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = 0)
ggplotly(p)
?scale_fill_continuous
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = 0)
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_gradient2(low = 'blue', high = 'red', midpoint = 0)
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_gradientn(values = brewer.pal(8,'RdYlBu'))
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_gradientn(colors  = brewer.pal(8,'RdYlBu'))
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_gradientn(colors  = brewer.pal(8,'Spectral'))
ggplot(df,aes(x = PCnum, y = Variable,fill=Value)) +
geom_tile()+
theme_fivethirtyeight()+
ggtitle('PCA Component Vector Values')+
scale_x_continuous('Components')+
scale_y_discrete('Variables')+
scale_fill_gradientn(colors  = brewer.pal(10,'Spectral'))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
col
cols
cols[grepl('Season|Team|Name',cols)]
shiny::runApp()
selectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?autoplot
?autoplot.prcomp
shiny::runApp()
library(shinyapps)
deployApp()
